--- pygettext3.1.orig	2011-10-16 14:43:17.000000000 +0200
+++ pygettext3.1-patched	2011-10-16 15:18:34.388000008 +0200
@@ -11,6 +11,20 @@
 # can now pass a filename, a module or package name, or a
 # directory (including globbing chars, important for Win32).
 # Made docstring fit in 80 chars wide displays using pydoc.
+# 
+# 2010-06-12 Jan-Hendrik Göllner <jan-hendrik.goellner@gmx.de>
+# Made it plural sensitive, added _N as default keyword.
+# Any keyworded function that is being supplied > 2 arguments
+# is treated like _N.
+# Also added support for constructs like "_('foo' + 10*'bar')"
+# by evaluating the whole expression.
+# Code like _(foo(arg1, arg2) + "bar") does not work by design
+# as that expression must be evaluated at runtime and this script
+# only extracts static strings known before runtime.
+# However it is possible to do things like
+#   "_N('World', 'Worlds', numWorlds)"
+# as only the first two arguments are evaluated.
+# Advanced version number from 1.5 to 1.6
 #
 
 # for selftesting
@@ -163,11 +177,10 @@
 import getopt
 import token
 import tokenize
-import operator
 
-__version__ = '1.5'
+__version__ = '1.6'
 
-default_keywords = ['_']
+default_keywords = ['_', '_N']
 DEFAULTKEYWORDS = ', '.join(default_keywords)
 
 EMPTYSTRING = ''
@@ -191,6 +204,7 @@
 "MIME-Version: 1.0\\n"
 "Content-Type: text/plain; charset=CHARSET\\n"
 "Content-Transfer-Encoding: ENCODING\\n"
+"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\\n"
 "Generated-By: pygettext.py %(version)s\\n"
 
 ''')
@@ -355,7 +369,7 @@
         self.__options = options
         self.__messages = {}
         self.__state = self.__waiting
-        self.__data = []
+        self.__args = []
         self.__lineno = -1
         self.__freshmodule = 1
         self.__curfile = None
@@ -367,6 +381,7 @@
 ##              'tstring:', tstring
         self.__state(ttype, tstring, stup[0])
 
+
     def __waiting(self, ttype, tstring, lineno):
         opts = self.__options
         # Do docstring extractions, if enabled
@@ -374,7 +389,19 @@
             # module docstring?
             if self.__freshmodule:
                 if ttype == tokenize.STRING:
-                    self.__addentry(safe_eval(tstring), lineno, isdocstring=1)
+                    try:
+                        s = safe_eval(tstring)
+                    except Exception as e:
+                        print(_(
+                            '*** %(file)s:%(lineno)s: could not evaluate argument "%(arg)s"'
+                            ) % {
+                            'arg': tstring,
+                            'file': self.__curfile,
+                            'lineno': self.__lineno
+                            }, file=sys.stderr)
+                        print(str(e), file=sys.stderr)
+                    else:
+                        self.__addentry([s], lineno, isdocstring=1)
                     self.__freshmodule = 0
                 elif ttype not in (tokenize.COMMENT, tokenize.NL):
                     self.__freshmodule = 0
@@ -394,7 +421,19 @@
     def __suitedocstring(self, ttype, tstring, lineno):
         # ignore any intervening noise
         if ttype == tokenize.STRING:
-            self.__addentry(safe_eval(tstring), lineno, isdocstring=1)
+            try:
+                s = safe_eval(tstring)
+            except Exception as e:
+                print(_(
+                    '*** %(file)s:%(lineno)s: could not evaluate argument "%(arg)s"'
+                    ) % {
+                    'arg': tstring,
+                    'file': self.__curfile,
+                    'lineno': self.__lineno
+                    }, file=sys.stderr)
+                print(str(e), file=sys.stderr)
+            else:
+                self.__addentry(s, lineno, isdocstring=1)
             self.__state = self.__waiting
         elif ttype not in (tokenize.NEWLINE, tokenize.INDENT,
                            tokenize.COMMENT):
@@ -403,41 +442,149 @@
 
     def __keywordseen(self, ttype, tstring, lineno):
         if ttype == tokenize.OP and tstring == '(':
-            self.__data = []
+            self.__args = ['']
             self.__lineno = lineno
-            self.__state = self.__openseen
+            self.__depth = 0
+            self.__state = self.__scanstring1
         else:
             self.__state = self.__waiting
 
-    def __openseen(self, ttype, tstring, lineno):
+    def __scanstring1(self, ttype, tstring, lineno):
+        # handle first argument, which is supposed to be a string.
         if ttype == tokenize.OP and tstring == ')':
-            # We've seen the last of the translatable strings.  Record the
-            # line number of the first line of the strings and update the list
-            # of messages seen.  Reset state for the next batch.  If there
-            # were no strings inside _(), then just ignore this entry.
-            if self.__data:
-                self.__addentry(EMPTYSTRING.join(self.__data))
+            # End of list of arguments for the current function call.
+            # If the argument list is empty (as in keyword()), ignore this call.
+            # otherwise evaluate the fragments we collected as the first
+            # argument and record its line number and update the list of
+            # messages seen. Reset state for the next batch.
+            if self.__args[-1]:
+                try:
+                    s = safe_eval(self.__args[-1])
+                except Exception as e:
+                    print(_(
+                        '*** %(file)s:%(lineno)s: could not evaluate argument "%(arg)s"'
+                        ) % {
+                        'arg': self.__args[-1],
+                        'file': self.__curfile,
+                        'lineno': self.__lineno
+                        }, file=sys.stderr)
+                    print(str(e), file=sys.stderr)
+                    self.__state = self.__waiting
+                    return
+                if type(s) == str or type(s) == unicode:
+                    self.__args[-1] = s
+                    self.__addentry(self.__args)
+                else:
+                    print(_(
+                        '*** %(file)s:%(lineno)s: argument is no str or unicode object "%(arg)s"'
+                        ) % {
+                        'arg': s,
+                        'file': self.__curfile,
+                        'lineno': self.__lineno
+                        }, file=sys.stderr)
             self.__state = self.__waiting
-        elif ttype == tokenize.STRING:
-            self.__data.append(safe_eval(tstring))
-        elif ttype not in [tokenize.COMMENT, token.INDENT, token.DEDENT,
-                           token.NEWLINE, tokenize.NL]:
-            # warn if we see anything else than STRING or whitespace
+        elif ttype == tokenize.OP and tstring == ',':
+            # Start of the next argument.
+            try:
+                s = safe_eval(self.__args[-1])
+            except Exception as e:
+                print(_(
+                    '*** %(file)s:%(lineno)s: could not evaluate argument "%(arg)s"'
+                    ) % {
+                    'arg': self.__args[-1],
+                    'file': self.__curfile,
+                    'lineno': self.__lineno
+                    }, file=sys.stderr)
+                print(str(e), file=sys.stderr)
+                self.__state = self.__waiting
+                return
+            if type(s) == str or type(s) == unicode:
+                self.__args[-1] = s
+                self.__args.append('') # next argument.
+                self.__state = self.__scanstring2
+            else:
+                print(_(
+                    '*** %(file)s:%(lineno)s: argument 1 is no str or unicode object "%(arg)s"'
+                    ) % {
+                    'arg': s,
+                    'file': self.__curfile,
+                    'lineno': self.__lineno
+                    }, file=sys.stderr)
+                self.__state = self.__waiting
+        else:
+            # add string to current argument for later evaluation.
+            # no state change in this case.
+            self.__args[-1] += tstring
+
+    def __scanstring2(self, ttype, tstring, lineno):
+        # handle second argument, which is supposed to be a string.
+        if ttype == tokenize.OP and tstring == ')':
+            # End of list of arguments for the current function call.
+            # This is an error if we expect either one or three arguments but
+            # never two.
             print(_(
-                '*** %(file)s:%(lineno)s: Seen unexpected token "%(token)s"'
+                '*** %(file)s:%(lineno)s: unexpected number of arguments (2)"'
                 ) % {
-                'token': tstring,
                 'file': self.__curfile,
                 'lineno': self.__lineno
                 }, file=sys.stderr)
             self.__state = self.__waiting
-
-    def __addentry(self, msg, lineno=None, isdocstring=0):
+        elif ttype == tokenize.OP and tstring == ',':
+            # Start of the next argument. We do not need to parse it, we only
+            # made sure it is there and now we assume this is a plural call.
+            try:
+                s = safe_eval(self.__args[-1])
+            except Exception as e:
+                print(_(
+                    '*** %(file)s:%(lineno)s: could not evaluate argument "%(arg)s"'
+                    ) % {
+                    'arg': self.__args[-1],
+                    'file': self.__curfile,
+                    'lineno': self.__lineno
+                    }, file=sys.stderr)
+                print(str(e), file=sys.stderr)
+                self.__state = self.__waiting
+                return
+            s = safe_eval(self.__args[-1])
+            if type(s) == str or type(s) == unicode:
+                self.__args[-1] = s
+                self.__addentry(self.__args)
+                self.__state = self.__waiting
+            else:
+                print(_(
+                    '*** %(file)s:%(lineno)s: argument 2 is no str or unicode object "%(arg)s"'
+                    ) % {
+                    'arg': s,
+                    'file': self.__curfile,
+                    'lineno': self.__lineno
+                    }, file=sys.stderr)
+                self.__state = self.__waiting
+        else:
+            # add string to current argument for later evaluation.
+            # no state change in this case.
+            self.__args[-1] += tstring
+
+    def __addentry(self, args, lineno=None, isdocstring=0):
+        isplural = 0
+        if len(args) > 1:
+            isplural = 1
         if lineno is None:
             lineno = self.__lineno
-        if not msg in self.__options.toexclude:
+        exclude = 0
+        if args[0] in self.__options.toexclude:
+            exclude = 1
+        if isplural:
+            if args[1] not in self.__options.toexclude:
+                # in case of plural, both strings must be in the toexclude list
+                # to exclude this entry.
+                exclude = 0
+        if not exclude:
             entry = (self.__curfile, lineno)
-            self.__messages.setdefault(msg, {})[entry] = isdocstring
+            # entries look like this:
+            # {('arg1','arg2') : {(filename,lineno) : <isdocstring>},
+            #  ('arg1',)       : {(filename,lineno) : <iscodstring>}}
+            # a key with len > 1 indicates plurals
+            self.__messages.setdefault(tuple(args[0:2]), {})[entry] = isdocstring
 
     def set_filename(self, filename):
         self.__curfile = filename
@@ -492,9 +639,13 @@
                         print(locline, file=fp)
                 if isdocstring:
                     print('#, docstring', file=fp)
-                print('msgid', normalize(k), file=fp)
-                print('msgstr ""\n', file=fp)
-
+                print('msgid', normalize(k[0]), file=fp)
+                if len(k) > 1:
+                    print('msgid_plural', normalize(k[1]), file=fp)
+                    print('msgstr[0] ""', file=fp)
+                    print('msgstr[1] ""\n', file=fp)
+                else:
+                    print('msgstr ""\n', file=fp)
 
 
 def main():
